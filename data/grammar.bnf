// Context free grammar for Cl.
// See parse.py for more details.

lambda ::= "\"~ identifier:: "->"~ expr_p7

// Used to be expr_p6 expr_p9
function_call ::= expr_p6 "("~ expr ")"~ // expr_p8
let_in ::= "let"~ identifier:: "="~ expr "in"~ expr
indexing ::= expr_p9 "["~ expr "]"~
dot_accessor ::= expr_p9 "."~ identifier::

argument_specifier% ::= identifier:: | identifier:: argument_specifier
ident_seq ::= | argument_specifier

function_definition ::= "def"~ identifier:: ident_seq
end ::= "end"~

// Define fancy expression forms.

comma_separated_values% ::= expr | expr ","~ comma_separated_values
list_literal ::= "["~ comma_separated_values "]"~ | "["~ "]"~
ternary ::= "if"~ expr "then"~ expr "else"~ expr

list_comp_group ::= assign_spec "<"~ "-"~ expr
list_comp_groups% ::= list_comp_group | list_comp_group ","~ list_comp_groups
list_comp ::= "["~ expr pipe::~ list_comp_groups "]"~

interval ::= "[" expr "."~ "."~ expr "]"
interval ::= "[" expr "."~ "."~ expr ")"
interval ::= "(" expr "."~ "."~ expr "]"
interval ::= "(" expr "."~ "."~ expr ")"

// Operator precedences and associativities are effectively defined here:
// The expression syntax is defined here.
expr_p9% ::= "("~ expr_p0 ")"~
expr_p8% ::= expr_p9
expr_p7% ::= expr_p8
expr_p6% ::= expr_p7
expr_p5% ::= expr_p6
expr_p4% ::= expr_p5
expr_p3% ::= expr_p4
expr_p2% ::= expr_p3
expr_p1% ::= expr_p2
expr_p0% ::= expr_p1

expr_p9:literal ::= identifier:: | string:: | integer::
expr_p9:this    ::= "@"~
expr_p9%        ::= dot_accessor | indexing
expr_p8%        ::= function_call
expr_p7%        ::= interval | list_comp | list_literal
expr_p6:unary   ::= "-" expr_p6
expr_p5:binary  ::= expr_p6 op_group_mult:: expr_p5
expr_p4:binary  ::= expr_p4 op_group_add:: expr_p5
expr_p3:binary  ::= expr_p4 op_group_broad:: expr_p3
expr_p2:binary  ::= expr_p3 op_group_compare:: expr_p2
expr_p1:binary  ::= expr_p2 op_group_logic:: expr_p1
expr_p7%        ::= lambda
expr_p0%        ::= let_in
expr_p0%        ::= ternary

expr% ::= expr_p0
raw_expr:expr ::= expr_p0

variable ::= identifier::
single_spec% ::= variable | dot_accessor | indexing | "("~ assign_spec ")"~
unpack_spec_rec% ::= | single_spec | single_spec ","~ unpack_spec_rec
unpack_spec ::= single_spec ","~ unpack_spec_rec
assign_spec% ::= single_spec | unpack_spec

assignment ::= assign_spec "="~ expr

// Define the block forming constructions.
if_block ::= "if"~ expr
else_block ::= "else"~
elif_block ::= "elif"~ expr
while_block ::= "while"~ expr
for_block ::= "for"~ list_comp_group
class_block ::= "class"~ identifier::

block_forming% ::= function_definition
block_forming% ::= if_block
block_forming% ::= else_block
block_forming% ::= elif_block
block_forming% ::= while_block
block_forming% ::= for_block
block_forming% ::= class_block

return ::= "return"~ | "return"~ expr
break ::= "break"~ | "break"~ integer::
continue ::= "continue"~ | "continue"~ integer::
// XXX: This is just for debugging purposes right now.
// Print should be a function...
debug_print ::= "print"~ expr

basic_single_line% ::= return
basic_single_line% ::= break
basic_single_line% ::= continue
basic_single_line% ::= debug_print

literal_cl_assembly ::= literal_cl_assembly::

// Here are the various forms of a syntax element:
syntax_element ::= raw_expr
syntax_element ::= assignment
syntax_element ::= unpack_assignment
syntax_element ::= end
syntax_element ::= block_forming
syntax_element ::= basic_single_line
syntax_element ::= literal_cl_assembly

